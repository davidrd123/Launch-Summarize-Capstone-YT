Thank you all for joining us today. In this video, we will discuss how we built Edamame, a load tester for real-time collaboration apps. Our team consists of Albert, Ginny, Luke, and Rachel, coming from different parts of Canada and the US. Here's a summary of what we will cover.

In Part A, we will start by defining load testing and explaining why companies conduct load tests. Then, we will focus on real-time collaboration apps like Slack, Coda, and Miro, discussing why we chose to focus on them. We will also explore how load testing differs for collaboration apps due to additional protocols like websockets. Lastly, we will review existing solutions for load testing and how companies currently address these challenges.

In Part B, we will outline our solution. We will provide an overview of Edamame's high-level architecture, explaining how it works. Then, we will delve into the specific challenges we encountered during the development process and how we addressed them within our architecture. Rachel will kick off Part A by explaining load testing.

Load testing is the process of simulating real user behavior on an application to measure its response. Companies use load testing to ensure their systems can handle large volumes of traffic. Load tests involve sending a large number of HTTP requests to mimic real traffic. However, load testing requires careful consideration of scale, protocols, and metrics. Scale refers to the number of concurrent virtual users. For collaboration apps, scale can reach six figures. Protocols involved in load testing typically include HTTP, but collaboration apps may also use websockets. Collecting and visualizing meaningful metrics is crucial, focusing on server-side and client-side data.

Now, Ginny will discuss collaboration apps in more detail, starting with how they work and their specific characteristics. Collaboration apps enable real-time communication, such as shared whiteboarding or messaging. Websockets are commonly used for real-time updates. These apps face challenges due to fan-out, where each message sent results in a large number of websocket messages being sent out. To effectively load test collaboration apps, scale, multiple protocols, and custom metrics are necessary.

Next, Luke will share insights about the current solutions landscape for load testing collaboration apps. Managed cloud-based services, self-hosted DIY tools, and licensed/open-source solutions are the main options. Edamame falls into the category of self-hosted solutions, providing the advantages of self-hosting while addressing complexities with its plug-and-play framework.

Lastly, Albert will discuss the challenges we faced during the development of Edamame and how we overcame them. Coordinating distributed load tests of over 100K virtual users, processing a million plus data points per second in real time, and extracting insights across multiple protocols were the key challenges. We used Kubernetes and the k6 operator for synchronization, employed the stat site server for data processing, and extended k6 with custom metrics to visualize data.

In conclusion, we have built Edamame to effectively load test real-time collaboration apps. We anticipate making improvements to handle larger user loads and explore advances in data processing and visualization. If you have any questions, please let us know. Thank you for watching our presentation.