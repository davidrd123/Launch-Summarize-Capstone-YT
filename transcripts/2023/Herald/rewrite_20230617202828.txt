I'm excited to present Harold, an observability solution that simplifies the deployment of the ELK stack. The ELK stack is a popular set of tools used for monitoring software systems. Harold allows developers to collect and explore telemetry data, including logs, traces, and metrics, through a user-friendly interface.

In this presentation, we'll explore what observability is and why it's important. We'll discuss the challenges involved in implementing an observability solution and explore existing solutions in the observability space. We'll dive into the details of what Harold is and what it does. Finally, we'll examine the design decisions and implementation challenges we faced while building Harold.

Observability is the ability to understand how a system functions based on its outputs and behaviors. It uses three types of telemetry data: logs, traces, and metrics. Logs are detailed records of events or messages generated by a software application. Traces analyze the different stages of a request as it passes through various components of a system. Metrics provide a representation of data measured over time intervals to track system health.

Logs, traces, and metrics work together to provide developers with a complete view of their software systems, enabling them to diagnose issues and improve performance.

To collect telemetry data, a solution must solve several problems, including data collection, processing and transformation, storage, and visualization. Commercial observability tools offer easy setup and rich features but may not be suitable for teams concerned about data privacy and compliance. Open-source tools provide flexibility but can be complex to deploy and manage.

Harold bridges the gap between commercial and open-source solutions. It is an open-source observability solution that simplifies the deployment of the ELK stack. Built on Elasticsearch, Logstash, and Kibana, Harold offers a comprehensive observability solution, leveraging the extensive documentation and community support of the ELK stack.

We built Harold using AWS Cloud Development Kit (CDK) and deployed it on Amazon Web Services infrastructure. We addressed challenges such as service discovery, secure communication, and scaling to handle fluctuations in data volume.

Harold's architecture includes Elasticsearch for data storage, Logstash for log processing, and Kibana for data visualization. We incorporated Fleet Server and APM Server for collecting and managing metrics and traces. Each component is deployed within a virtual private cloud to ensure secure and efficient communication.

During the development process, we spent a significant amount of time conducting additional research to fill knowledge gaps not covered by course material. This project allowed us to explore an interesting space and gain hands-on experience with observability tools. We followed an agile collaboration approach, using tools like Trello to track tasks and regularly meeting to discuss progress.

Overall, developing Harold was a challenging but rewarding experience. We aim to continue improving it by incorporating features such as auto-scaling, Kafka integration, and more efficient storage options.